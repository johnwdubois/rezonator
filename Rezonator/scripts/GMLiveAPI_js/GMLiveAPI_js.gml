// You can comment out this whole file if you don't use HTML5
function live_preinit_js_dummy() {}
if(live_enabled)
function live_preinit_js_func_0(l_ind) {
	switch (l_ind) {
		case 0: return nameof;
		case 1: return is_real;
		case 2: return is_numeric;
		case 3: return is_string;
		case 4: return is_array;
		case 5: return is_undefined;
		case 6: return is_int32;
		case 7: return is_int64;
		case 8: return is_ptr;
		case 9: return is_bool;
		case 10: return is_nan;
		case 11: return is_infinity;
		case 12: return is_struct;
		case 13: return is_method;
		case 14: return is_instanceof;
		case 15: return is_callable;
		case 16: return is_handle;
		case 17: return static_get;
		case 18: return static_set;
		case 19: return typeof;
		case 20: return instanceof;
		case 21: return exception_unhandled_handler;
		case 22: return variable_global_exists;
		case 23: return variable_global_get;
		case 24: return variable_global_set;
		case 25: return variable_instance_exists;
		case 26: return variable_instance_get;
		case 27: return variable_instance_set;
		case 28: return variable_instance_get_names;
		case 29: return variable_instance_names_count;
		case 30: return variable_struct_exists;
		case 31: return variable_struct_get;
		case 32: return variable_struct_set;
		case 33: return variable_struct_get_names;
		case 34: return variable_struct_names_count;
		case 35: return variable_struct_remove;
		case 36: return variable_get_hash;
		case 37: return variable_clone;
		case 38: return struct_exists;
		case 39: return struct_get;
		case 40: return struct_set;
		case 41: return struct_get_names;
		case 42: return struct_names_count;
		case 43: return struct_remove;
		case 44: return struct_foreach;
		case 45: return struct_get_from_hash;
		case 46: return struct_set_from_hash;
		case 47: return array_length;
		case 48: return array_equals;
		case 49: return array_create;
		case 50: return array_copy;
		case 51: return array_resize;
		case 52: return array_get;
		case 53: return array_set;
		case 54: return array_push;
		case 55: return array_pop;
		case 56: return array_shift;
		case 57: return array_insert;
		case 58: return array_delete;
		case 59: return array_sort;
		case 60: return array_shuffle;
		case 61: return array_shuffle_ext;
		case 62: return array_get_index;
		case 63: return array_contains;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_64(l_ind) {
	switch (l_ind) {
		case 64: return array_contains_ext;
		case 65: return array_first;
		case 66: return array_last;
		case 67: return array_create_ext;
		case 68: return array_find_index;
		case 69: return array_any;
		case 70: return array_all;
		case 71: return array_foreach;
		case 72: return array_reduce;
		case 73: return array_filter;
		case 74: return array_filter_ext;
		case 75: return array_map;
		case 76: return array_map_ext;
		case 77: return array_copy_while;
		case 78: return array_unique;
		case 79: return array_unique_ext;
		case 80: return array_reverse;
		case 81: return array_reverse_ext;
		case 82: return array_concat;
		case 83: return array_union;
		case 84: return array_intersection;
		case 85: return random;
		case 86: return random_range;
		case 87: return irandom;
		case 88: return irandom_range;
		case 89: return random_set_seed;
		case 90: return random_get_seed;
		case 91: return randomize;
		case 92: return randomise;
		case 93: return abs;
		case 94: return round;
		case 95: return floor;
		case 96: return ceil;
		case 97: return sign;
		case 98: return frac;
		case 99: return sqrt;
		case 100: return sqr;
		case 101: return exp;
		case 102: return ln;
		case 103: return log2;
		case 104: return log10;
		case 105: return sin;
		case 106: return cos;
		case 107: return tan;
		case 108: return arcsin;
		case 109: return arccos;
		case 110: return arctan;
		case 111: return arctan2;
		case 112: return dsin;
		case 113: return dcos;
		case 114: return dtan;
		case 115: return darcsin;
		case 116: return darccos;
		case 117: return darctan;
		case 118: return darctan2;
		case 119: return degtorad;
		case 120: return radtodeg;
		case 121: return power;
		case 122: return logn;
		case 123: return mean;
		case 124: return median;
		case 125: return clamp;
		case 126: return lerp;
		case 127: return dot_product;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_128(l_ind) {
	switch (l_ind) {
		case 128: return dot_product_3d;
		case 129: return dot_product_normalised;
		case 130: return dot_product_3d_normalised;
		case 131: return dot_product_normalized;
		case 132: return dot_product_3d_normalized;
		case 133: return math_set_epsilon;
		case 134: return math_get_epsilon;
		case 135: return angle_difference;
		case 136: return point_distance_3d;
		case 137: return point_distance;
		case 138: return point_direction;
		case 139: return lengthdir_x;
		case 140: return lengthdir_y;
		case 141: return real;
		case 142: return bool;
		case 143: return string;
		case 144: return int64;
		case 145: return ptr;
		case 146: return handle_parse;
		case 147: return string_format;
		case 148: return chr;
		case 149: return ansi_char;
		case 150: return ord;
		case 151: return method;
		case 152: return method_get_index;
		case 153: return method_get_self;
		case 154: return string_length;
		case 155: return string_byte_length;
		case 156: return string_pos;
		case 157: return string_pos_ext;
		case 158: return string_last_pos;
		case 159: return string_last_pos_ext;
		case 160: return string_copy;
		case 161: return string_char_at;
		case 162: return string_ord_at;
		case 163: return string_byte_at;
		case 164: return string_set_byte_at;
		case 165: return string_delete;
		case 166: return string_insert;
		case 167: return string_lower;
		case 168: return string_upper;
		case 169: return string_repeat;
		case 170: return string_letters;
		case 171: return string_digits;
		case 172: return string_lettersdigits;
		case 173: return string_replace;
		case 174: return string_replace_all;
		case 175: return string_count;
		case 176: return string_hash_to_newline;
		case 177: return string_ext;
		case 178: return string_trim_start;
		case 179: return string_trim_end;
		case 180: return string_trim;
		case 181: return string_starts_with;
		case 182: return string_ends_with;
		case 183: return string_split;
		case 184: return string_split_ext;
		case 185: return string_join;
		case 186: return string_join_ext;
		case 187: return string_concat;
		case 188: return string_concat_ext;
		case 189: return string_foreach;
		case 190: return clipboard_has_text;
		case 191: return clipboard_set_text;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_192(l_ind) {
	switch (l_ind) {
		case 192: return clipboard_get_text;
		case 193: return date_current_datetime;
		case 194: return date_create_datetime;
		case 195: return date_valid_datetime;
		case 196: return date_inc_year;
		case 197: return date_inc_month;
		case 198: return date_inc_week;
		case 199: return date_inc_day;
		case 200: return date_inc_hour;
		case 201: return date_inc_minute;
		case 202: return date_inc_second;
		case 203: return date_get_year;
		case 204: return date_get_month;
		case 205: return date_get_week;
		case 206: return date_get_day;
		case 207: return date_get_hour;
		case 208: return date_get_minute;
		case 209: return date_get_second;
		case 210: return date_get_weekday;
		case 211: return date_get_day_of_year;
		case 212: return date_get_hour_of_year;
		case 213: return date_get_minute_of_year;
		case 214: return date_get_second_of_year;
		case 215: return date_year_span;
		case 216: return date_month_span;
		case 217: return date_week_span;
		case 218: return date_day_span;
		case 219: return date_hour_span;
		case 220: return date_minute_span;
		case 221: return date_second_span;
		case 222: return date_compare_datetime;
		case 223: return date_compare_date;
		case 224: return date_compare_time;
		case 225: return date_date_of;
		case 226: return date_time_of;
		case 227: return date_datetime_string;
		case 228: return date_date_string;
		case 229: return date_time_string;
		case 230: return date_days_in_month;
		case 231: return date_days_in_year;
		case 232: return date_leap_year;
		case 233: return date_is_today;
		case 234: return date_set_timezone;
		case 235: return date_get_timezone;
		case 236: return game_set_speed;
		case 237: return game_get_speed;
		case 238: return motion_set;
		case 239: return motion_add;
		case 240: return place_free;
		case 241: return place_empty;
		case 242: return place_meeting;
		case 243: return place_snapped;
		case 244: return move_random;
		case 245: return move_snap;
		case 246: return move_towards_point;
		case 247: return move_contact_solid;
		case 248: return move_contact_all;
		case 249: return move_outside_solid;
		case 250: return move_outside_all;
		case 251: return move_bounce_solid;
		case 252: return move_bounce_all;
		case 253: return move_wrap;
		case 254: return move_and_collide;
		case 255: return distance_to_point;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_256(l_ind) {
	switch (l_ind) {
		case 256: return distance_to_object;
		case 257: return position_empty;
		case 258: return position_meeting;
		case 259: return path_start;
		case 260: return path_end;
		case 261: return mp_linear_step;
		case 262: return mp_potential_step;
		case 263: return mp_linear_step_object;
		case 264: return mp_potential_step_object;
		case 265: return mp_potential_settings;
		case 266: return mp_linear_path;
		case 267: return mp_potential_path;
		case 268: return mp_linear_path_object;
		case 269: return mp_potential_path_object;
		case 270: return mp_grid_create;
		case 271: return mp_grid_destroy;
		case 272: return mp_grid_clear_all;
		case 273: return mp_grid_clear_cell;
		case 274: return mp_grid_clear_rectangle;
		case 275: return mp_grid_add_cell;
		case 276: return mp_grid_get_cell;
		case 277: return mp_grid_add_rectangle;
		case 278: return mp_grid_add_instances;
		case 279: return mp_grid_path;
		case 280: return mp_grid_draw;
		case 281: return mp_grid_to_ds_grid;
		case 282: return collision_point;
		case 283: return collision_rectangle;
		case 284: return collision_circle;
		case 285: return collision_ellipse;
		case 286: return collision_line;
		case 287: return collision_point_list;
		case 288: return collision_rectangle_list;
		case 289: return collision_circle_list;
		case 290: return collision_ellipse_list;
		case 291: return collision_line_list;
		case 292: return instance_position_list;
		case 293: return instance_place_list;
		case 294: return point_in_rectangle;
		case 295: return point_in_triangle;
		case 296: return point_in_circle;
		case 297: return rectangle_in_rectangle;
		case 298: return rectangle_in_triangle;
		case 299: return rectangle_in_circle;
		case 300: return instance_find;
		case 301: return instance_exists;
		case 302: return instance_number;
		case 303: return instance_position;
		case 304: return instance_nearest;
		case 305: return instance_furthest;
		case 306: return instance_place;
		case 307: return instance_create_depth;
		case 308: return instance_create_layer;
		case 309: return instance_copy;
		case 310: return instance_change;
		case 311: return instance_destroy;
		case 312: return position_destroy;
		case 313: return position_change;
		case 314: return instance_id_get;
		case 315: return instance_deactivate_all;
		case 316: return instance_deactivate_object;
		case 317: return instance_deactivate_region;
		case 318: return instance_activate_all;
		case 319: return instance_activate_object;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_320(l_ind) {
	switch (l_ind) {
		case 320: return instance_activate_region;
		case 321: return room_goto;
		case 322: return room_goto_previous;
		case 323: return room_goto_next;
		case 324: return room_previous;
		case 325: return room_next;
		case 326: return room_restart;
		case 327: return game_end;
		case 328: return game_restart;
		case 329: return game_load;
		case 330: return game_save;
		case 331: return game_save_buffer;
		case 332: return game_load_buffer;
		case 333: return game_change;
		case 334: return scheduler_resolution_set;
		case 335: return scheduler_resolution_get;
		case 336: return event_perform;
		case 337: return event_perform_async;
		case 338: return event_user;
		case 339: return event_perform_object;
		case 340: return event_inherited;
		case 341: return show_debug_message;
		case 342: return show_debug_message_ext;
		case 343: return show_debug_overlay;
		case 344: return is_debug_overlay_open;
		case 345: return is_mouse_over_debug_overlay;
		case 346: return is_keyboard_used_debug_overlay;
		case 347: return show_debug_log;
		case 348: return debug_event;
		case 349: return debug_get_callstack;
		case 350: return alarm_get;
		case 351: return alarm_set;
		case 352: return dbg_view;
		case 353: return dbg_section;
		case 354: return dbg_view_delete;
		case 355: return dbg_section_delete;
		case 356: return dbg_slider;
		case 357: return dbg_slider_int;
		case 358: return dbg_drop_down;
		case 359: return dbg_watch;
		case 360: return dbg_text;
		case 361: return dbg_sprite;
		case 362: return dbg_text_input;
		case 363: return dbg_checkbox;
		case 364: return dbg_colour;
		case 365: return dbg_color;
		case 366: return dbg_button;
		case 367: return dbg_same_line;
		case 368: return dbg_add_font_glyphs;
		case 369: return ref_create;
		case 370: return keyboard_set_map;
		case 371: return keyboard_get_map;
		case 372: return keyboard_unset_map;
		case 373: return keyboard_check;
		case 374: return keyboard_check_pressed;
		case 375: return keyboard_check_released;
		case 376: return keyboard_check_direct;
		case 377: return keyboard_get_numlock;
		case 378: return keyboard_set_numlock;
		case 379: return keyboard_key_press;
		case 380: return keyboard_key_release;
		case 381: return keyboard_clear;
		case 382: return io_clear;
		case 383: return mouse_check_button;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_384(l_ind) {
	switch (l_ind) {
		case 384: return mouse_check_button_pressed;
		case 385: return mouse_check_button_released;
		case 386: return mouse_wheel_up;
		case 387: return mouse_wheel_down;
		case 388: return mouse_clear;
		case 389: return draw_self;
		case 390: return draw_sprite;
		case 391: return draw_sprite_pos;
		case 392: return draw_sprite_ext;
		case 393: return draw_sprite_stretched;
		case 394: return draw_sprite_stretched_ext;
		case 395: return draw_sprite_tiled;
		case 396: return draw_sprite_tiled_ext;
		case 397: return draw_sprite_part;
		case 398: return draw_sprite_part_ext;
		case 399: return draw_sprite_general;
		case 400: return draw_clear;
		case 401: return draw_clear_alpha;
		case 402: return draw_point;
		case 403: return draw_line;
		case 404: return draw_line_width;
		case 405: return draw_rectangle;
		case 406: return draw_roundrect;
		case 407: return draw_roundrect_ext;
		case 408: return draw_triangle;
		case 409: return draw_circle;
		case 410: return draw_ellipse;
		case 411: return draw_set_circle_precision;
		case 412: return draw_arrow;
		case 413: return draw_button;
		case 414: return draw_path;
		case 415: return draw_healthbar;
		case 416: return draw_getpixel;
		case 417: return draw_getpixel_ext;
		case 418: return draw_set_colour;
		case 419: return draw_set_color;
		case 420: return draw_set_alpha;
		case 421: return draw_get_colour;
		case 422: return draw_get_color;
		case 423: return draw_get_alpha;
		case 424: return merge_colour;
		case 425: return make_colour_rgb;
		case 426: return make_colour_hsv;
		case 427: return colour_get_red;
		case 428: return colour_get_green;
		case 429: return colour_get_blue;
		case 430: return colour_get_hue;
		case 431: return colour_get_saturation;
		case 432: return colour_get_value;
		case 433: return merge_color;
		case 434: return make_color_rgb;
		case 435: return make_color_hsv;
		case 436: return color_get_red;
		case 437: return color_get_green;
		case 438: return color_get_blue;
		case 439: return color_get_hue;
		case 440: return color_get_saturation;
		case 441: return color_get_value;
		case 442: return screen_save;
		case 443: return screen_save_part;
		case 444: return gif_open;
		case 445: return gif_add_surface;
		case 446: return gif_save;
		case 447: return gif_save_buffer;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_448(l_ind) {
	switch (l_ind) {
		case 448: return draw_set_font;
		case 449: return draw_get_font;
		case 450: return draw_set_halign;
		case 451: return draw_get_halign;
		case 452: return draw_set_valign;
		case 453: return draw_get_valign;
		case 454: return draw_text;
		case 455: return draw_text_ext;
		case 456: return string_width;
		case 457: return string_height;
		case 458: return string_width_ext;
		case 459: return string_height_ext;
		case 460: return draw_text_transformed;
		case 461: return draw_text_ext_transformed;
		case 462: return draw_text_colour;
		case 463: return draw_text_ext_colour;
		case 464: return draw_text_transformed_colour;
		case 465: return draw_text_ext_transformed_colour;
		case 466: return draw_text_color;
		case 467: return draw_text_ext_color;
		case 468: return draw_text_transformed_color;
		case 469: return draw_text_ext_transformed_color;
		case 470: return draw_point_colour;
		case 471: return draw_line_colour;
		case 472: return draw_line_width_colour;
		case 473: return draw_rectangle_colour;
		case 474: return draw_roundrect_colour;
		case 475: return draw_roundrect_colour_ext;
		case 476: return draw_triangle_colour;
		case 477: return draw_circle_colour;
		case 478: return draw_ellipse_colour;
		case 479: return draw_point_color;
		case 480: return draw_line_color;
		case 481: return draw_line_width_color;
		case 482: return draw_rectangle_color;
		case 483: return draw_roundrect_color;
		case 484: return draw_roundrect_color_ext;
		case 485: return draw_triangle_color;
		case 486: return draw_circle_color;
		case 487: return draw_ellipse_color;
		case 488: return draw_primitive_begin;
		case 489: return draw_vertex;
		case 490: return draw_vertex_colour;
		case 491: return draw_vertex_color;
		case 492: return draw_primitive_end;
		case 493: return sprite_get_uvs;
		case 494: return font_get_uvs;
		case 495: return font_get_info;
		case 496: return font_cache_glyph;
		case 497: return sprite_get_texture;
		case 498: return font_get_texture;
		case 499: return texture_get_width;
		case 500: return texture_get_height;
		case 501: return texture_get_uvs;
		case 502: return draw_primitive_begin_texture;
		case 503: return draw_vertex_texture;
		case 504: return draw_vertex_texture_colour;
		case 505: return draw_vertex_texture_color;
		case 506: return texture_global_scale;
		case 507: return surface_create;
		case 508: return surface_create_ext;
		case 509: return surface_resize;
		case 510: return surface_free;
		case 511: return surface_exists;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_512(l_ind) {
	switch (l_ind) {
		case 512: return surface_get_width;
		case 513: return surface_get_height;
		case 514: return surface_get_texture;
		case 515: return surface_get_format;
		case 516: return surface_set_target;
		case 517: return surface_set_target_ext;
		case 518: return surface_get_target;
		case 519: return surface_get_target_ext;
		case 520: return surface_reset_target;
		case 521: return surface_depth_disable;
		case 522: return surface_get_depth_disable;
		case 523: return surface_format_is_supported;
		case 524: return draw_surface;
		case 525: return draw_surface_stretched;
		case 526: return draw_surface_tiled;
		case 527: return draw_surface_part;
		case 528: return draw_surface_ext;
		case 529: return draw_surface_stretched_ext;
		case 530: return draw_surface_tiled_ext;
		case 531: return draw_surface_part_ext;
		case 532: return draw_surface_general;
		case 533: return surface_getpixel;
		case 534: return surface_getpixel_ext;
		case 535: return surface_save;
		case 536: return surface_save_part;
		case 537: return surface_copy;
		case 538: return surface_copy_part;
		case 539: return application_surface_draw_enable;
		case 540: return application_get_position;
		case 541: return application_surface_enable;
		case 542: return application_surface_is_enabled;
		case 543: return video_open;
		case 544: return video_close;
		case 545: return video_set_volume;
		case 546: return video_draw;
		case 547: return video_pause;
		case 548: return video_resume;
		case 549: return video_enable_loop;
		case 550: return video_seek_to;
		case 551: return video_get_duration;
		case 552: return video_get_position;
		case 553: return video_get_status;
		case 554: return video_get_format;
		case 555: return video_is_looping;
		case 556: return video_get_volume;
		case 557: return display_get_width;
		case 558: return display_get_height;
		case 559: return display_get_orientation;
		case 560: return display_get_gui_width;
		case 561: return display_get_gui_height;
		case 562: return display_get_frequency;
		case 563: return display_reset;
		case 564: return display_mouse_get_x;
		case 565: return display_mouse_get_y;
		case 566: return display_mouse_set;
		case 567: return display_set_ui_visibility;
		case 568: return window_set_showborder;
		case 569: return window_get_showborder;
		case 570: return window_set_fullscreen;
		case 571: return window_get_fullscreen;
		case 572: return window_set_caption;
		case 573: return window_set_min_width;
		case 574: return window_set_max_width;
		case 575: return window_set_min_height;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_576(l_ind) {
	switch (l_ind) {
		case 576: return window_set_max_height;
		case 577: return window_get_visible_rects;
		case 578: return window_get_caption;
		case 579: return window_set_cursor;
		case 580: return window_enable_borderless_fullscreen;
		case 581: return window_get_borderless_fullscreen;
		case 582: return window_get_cursor;
		case 583: return window_set_colour;
		case 584: return window_get_colour;
		case 585: return window_set_color;
		case 586: return window_get_color;
		case 587: return window_set_position;
		case 588: return window_set_size;
		case 589: return window_set_rectangle;
		case 590: return window_center;
		case 591: return window_get_x;
		case 592: return window_get_y;
		case 593: return window_get_width;
		case 594: return window_get_height;
		case 595: return window_mouse_get_x;
		case 596: return window_mouse_get_y;
		case 597: return window_mouse_set;
		case 598: return window_mouse_set_locked;
		case 599: return window_mouse_get_locked;
		case 600: return window_mouse_get_delta_x;
		case 601: return window_mouse_get_delta_y;
		case 602: return window_view_mouse_get_x;
		case 603: return window_view_mouse_get_y;
		case 604: return window_views_mouse_get_x;
		case 605: return window_views_mouse_get_y;
		case 606: return audio_listener_position;
		case 607: return audio_listener_velocity;
		case 608: return audio_listener_orientation;
		case 609: return audio_emitter_position;
		case 610: return audio_emitter_create;
		case 611: return audio_emitter_free;
		case 612: return audio_emitter_exists;
		case 613: return audio_emitter_pitch;
		case 614: return audio_emitter_velocity;
		case 615: return audio_emitter_falloff;
		case 616: return audio_emitter_gain;
		case 617: return audio_play_sound;
		case 618: return audio_play_sound_on;
		case 619: return audio_play_sound_at;
		case 620: return audio_play_sound_ext;
		case 621: return audio_stop_sound;
		case 622: return audio_resume_sound;
		case 623: return audio_pause_sound;
		case 624: return audio_channel_num;
		case 625: return audio_sound_length;
		case 626: return audio_get_type;
		case 627: return audio_falloff_set_model;
		case 628: return audio_master_gain;
		case 629: return audio_sound_gain;
		case 630: return audio_sound_pitch;
		case 631: return audio_stop_all;
		case 632: return audio_resume_all;
		case 633: return audio_pause_all;
		case 634: return audio_is_playing;
		case 635: return audio_is_paused;
		case 636: return audio_exists;
		case 637: return audio_system_is_available;
		case 638: return audio_system_is_initialised;
		case 639: return audio_sound_is_playable;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_640(l_ind) {
	switch (l_ind) {
		case 640: return audio_emitter_get_gain;
		case 641: return audio_emitter_get_pitch;
		case 642: return audio_emitter_get_x;
		case 643: return audio_emitter_get_y;
		case 644: return audio_emitter_get_z;
		case 645: return audio_emitter_get_vx;
		case 646: return audio_emitter_get_vy;
		case 647: return audio_emitter_get_vz;
		case 648: return audio_listener_set_position;
		case 649: return audio_listener_set_velocity;
		case 650: return audio_listener_set_orientation;
		case 651: return audio_listener_get_data;
		case 652: return audio_set_master_gain;
		case 653: return audio_get_master_gain;
		case 654: return audio_sound_get_gain;
		case 655: return audio_sound_get_pitch;
		case 656: return audio_get_name;
		case 657: return audio_sound_set_track_position;
		case 658: return audio_sound_get_track_position;
		case 659: return audio_sound_loop;
		case 660: return audio_sound_get_loop;
		case 661: return audio_sound_loop_start;
		case 662: return audio_sound_get_loop_start;
		case 663: return audio_sound_loop_end;
		case 664: return audio_sound_get_loop_end;
		case 665: return audio_create_stream;
		case 666: return audio_destroy_stream;
		case 667: return audio_create_sync_group;
		case 668: return audio_destroy_sync_group;
		case 669: return audio_play_in_sync_group;
		case 670: return audio_start_sync_group;
		case 671: return audio_stop_sync_group;
		case 672: return audio_pause_sync_group;
		case 673: return audio_resume_sync_group;
		case 674: return audio_sync_group_get_track_pos;
		case 675: return audio_sync_group_debug;
		case 676: return audio_sync_group_is_playing;
		case 677: return audio_sync_group_is_paused;
		case 678: return audio_debug;
		case 679: return audio_group_load;
		case 680: return audio_group_unload;
		case 681: return audio_group_is_loaded;
		case 682: return audio_group_load_progress;
		case 683: return audio_group_name;
		case 684: return audio_group_stop_all;
		case 685: return audio_group_set_gain;
		case 686: return audio_group_get_gain;
		case 687: return audio_group_get_assets;
		case 688: return audio_sound_get_audio_group;
		case 689: return audio_create_buffer_sound;
		case 690: return audio_free_buffer_sound;
		case 691: return audio_create_play_queue;
		case 692: return audio_free_play_queue;
		case 693: return audio_queue_sound;
		case 694: return audio_get_recorder_count;
		case 695: return audio_get_recorder_info;
		case 696: return audio_start_recording;
		case 697: return audio_stop_recording;
		case 698: return audio_sound_get_listener_mask;
		case 699: return audio_emitter_get_listener_mask;
		case 700: return audio_get_listener_mask;
		case 701: return audio_sound_set_listener_mask;
		case 702: return audio_emitter_set_listener_mask;
		case 703: return audio_set_listener_mask;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_704(l_ind) {
	switch (l_ind) {
		case 704: return audio_get_listener_count;
		case 705: return audio_get_listener_info;
		case 706: return show_message;
		case 707: return show_message_async;
		case 708: return clickable_add;
		case 709: return clickable_add_ext;
		case 710: return clickable_change;
		case 711: return clickable_change_ext;
		case 712: return clickable_delete;
		case 713: return clickable_exists;
		case 714: return clickable_set_style;
		case 715: return show_question;
		case 716: return show_question_async;
		case 717: return get_integer;
		case 718: return get_string;
		case 719: return get_integer_async;
		case 720: return get_string_async;
		case 721: return get_login_async;
		case 722: return get_open_filename;
		case 723: return get_save_filename;
		case 724: return get_open_filename_ext;
		case 725: return get_save_filename_ext;
		case 726: return show_error;
		case 727: return highscore_clear;
		case 728: return highscore_add;
		case 729: return highscore_value;
		case 730: return highscore_name;
		case 731: return draw_highscore;
		case 732: return sprite_exists;
		case 733: return sprite_get_name;
		case 734: return sprite_get_number;
		case 735: return sprite_get_width;
		case 736: return sprite_get_height;
		case 737: return sprite_get_xoffset;
		case 738: return sprite_get_yoffset;
		case 739: return sprite_get_bbox_mode;
		case 740: return sprite_get_bbox_left;
		case 741: return sprite_get_bbox_right;
		case 742: return sprite_get_bbox_top;
		case 743: return sprite_get_bbox_bottom;
		case 744: return sprite_set_bbox_mode;
		case 745: return sprite_set_bbox;
		case 746: return sprite_save;
		case 747: return sprite_save_strip;
		case 748: return sprite_set_cache_size;
		case 749: return sprite_set_cache_size_ext;
		case 750: return sprite_get_tpe;
		case 751: return sprite_prefetch;
		case 752: return sprite_prefetch_multi;
		case 753: return sprite_flush;
		case 754: return sprite_flush_multi;
		case 755: return sprite_set_speed;
		case 756: return sprite_get_speed_type;
		case 757: return sprite_get_speed;
		case 758: return sprite_get_info;
		case 759: return sprite_get_nineslice;
		case 760: return sprite_set_nineslice;
		case 761: return sprite_nineslice_create;
		case 762: return texture_is_ready;
		case 763: return texture_prefetch;
		case 764: return texture_flush;
		case 765: return texturegroup_get_textures;
		case 766: return texturegroup_get_sprites;
		case 767: return texturegroup_get_fonts;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_768(l_ind) {
	switch (l_ind) {
		case 768: return texturegroup_get_tilesets;
		case 769: return texturegroup_get_names;
		case 770: return texturegroup_load;
		case 771: return texturegroup_unload;
		case 772: return texturegroup_get_status;
		case 773: return texturegroup_set_mode;
		case 774: return texture_debug_messages;
		case 775: return font_exists;
		case 776: return font_get_name;
		case 777: return font_get_fontname;
		case 778: return font_get_bold;
		case 779: return font_get_italic;
		case 780: return font_get_first;
		case 781: return font_get_last;
		case 782: return font_get_size;
		case 783: return font_set_cache_size;
		case 784: return path_exists;
		case 785: return path_get_name;
		case 786: return path_get_length;
		case 787: return path_get_kind;
		case 788: return path_get_closed;
		case 789: return path_get_precision;
		case 790: return path_get_number;
		case 791: return path_get_point_x;
		case 792: return path_get_point_y;
		case 793: return path_get_point_speed;
		case 794: return path_get_x;
		case 795: return path_get_y;
		case 796: return path_get_speed;
		case 797: return script_exists;
		case 798: return script_get_name;
		case 799: return timeline_add;
		case 800: return timeline_delete;
		case 801: return timeline_clear;
		case 802: return timeline_exists;
		case 803: return timeline_get_name;
		case 804: return timeline_moment_clear;
		case 805: return timeline_moment_add_script;
		case 806: return timeline_size;
		case 807: return timeline_max_moment;
		case 808: return object_exists;
		case 809: return object_get_name;
		case 810: return object_get_sprite;
		case 811: return object_get_solid;
		case 812: return object_get_visible;
		case 813: return object_get_persistent;
		case 814: return object_get_mask;
		case 815: return object_get_parent;
		case 816: return object_get_physics;
		case 817: return object_is_ancestor;
		case 818: return room_exists;
		case 819: return room_get_name;
		case 820: return room_get_info;
		case 821: return sprite_set_offset;
		case 822: return sprite_duplicate;
		case 823: return sprite_assign;
		case 824: return sprite_merge;
		case 825: return sprite_add;
		case 826: return sprite_add_ext;
		case 827: return sprite_replace;
		case 828: return sprite_create_from_surface;
		case 829: return sprite_add_from_surface;
		case 830: return sprite_delete;
		case 831: return sprite_set_alpha_from_sprite;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_832(l_ind) {
	switch (l_ind) {
		case 832: return sprite_collision_mask;
		case 833: return font_add_enable_aa;
		case 834: return font_add_get_enable_aa;
		case 835: return font_add;
		case 836: return font_add_sprite;
		case 837: return font_add_sprite_ext;
		case 838: return font_replace_sprite;
		case 839: return font_replace_sprite_ext;
		case 840: return font_delete;
		case 841: return font_enable_sdf;
		case 842: return font_get_sdf_enabled;
		case 843: return font_sdf_spread;
		case 844: return font_get_sdf_spread;
		case 845: return font_enable_effects;
		case 846: return path_set_kind;
		case 847: return path_set_closed;
		case 848: return path_set_precision;
		case 849: return path_add;
		case 850: return path_assign;
		case 851: return path_duplicate;
		case 852: return path_append;
		case 853: return path_delete;
		case 854: return path_add_point;
		case 855: return path_insert_point;
		case 856: return path_change_point;
		case 857: return path_delete_point;
		case 858: return path_clear_points;
		case 859: return path_reverse;
		case 860: return path_mirror;
		case 861: return path_flip;
		case 862: return path_rotate;
		case 863: return path_rescale;
		case 864: return path_shift;
		case 865: return object_set_sprite;
		case 866: return object_set_solid;
		case 867: return object_set_visible;
		case 868: return object_set_persistent;
		case 869: return object_set_mask;
		case 870: return room_set_width;
		case 871: return room_set_height;
		case 872: return room_set_persistent;
		case 873: return room_set_viewport;
		case 874: return room_get_viewport;
		case 875: return room_set_view_enabled;
		case 876: return room_add;
		case 877: return room_duplicate;
		case 878: return room_assign;
		case 879: return room_instance_add;
		case 880: return room_instance_clear;
		case 881: return room_get_camera;
		case 882: return room_set_camera;
		case 883: return asset_get_index;
		case 884: return asset_get_type;
		case 885: return asset_get_ids;
		case 886: return file_text_open_from_string;
		case 887: return file_text_open_read;
		case 888: return file_text_open_write;
		case 889: return file_text_open_append;
		case 890: return file_text_close;
		case 891: return file_text_write_string;
		case 892: return file_text_write_real;
		case 893: return file_text_writeln;
		case 894: return file_text_read_string;
		case 895: return file_text_read_real;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_896(l_ind) {
	switch (l_ind) {
		case 896: return file_text_readln;
		case 897: return file_text_eof;
		case 898: return file_text_eoln;
		case 899: return file_exists;
		case 900: return file_delete;
		case 901: return file_rename;
		case 902: return file_copy;
		case 903: return directory_exists;
		case 904: return directory_create;
		case 905: return directory_destroy;
		case 906: return file_find_first;
		case 907: return file_find_next;
		case 908: return file_find_close;
		case 909: return file_attributes;
		case 910: return filename_name;
		case 911: return filename_path;
		case 912: return filename_dir;
		case 913: return filename_drive;
		case 914: return filename_ext;
		case 915: return filename_change_ext;
		case 916: return file_bin_open;
		case 917: return file_bin_rewrite;
		case 918: return file_bin_close;
		case 919: return file_bin_position;
		case 920: return file_bin_size;
		case 921: return file_bin_seek;
		case 922: return file_bin_write_byte;
		case 923: return file_bin_read_byte;
		case 924: return parameter_count;
		case 925: return parameter_string;
		case 926: return environment_get_variable;
		case 927: return ini_open_from_string;
		case 928: return ini_open;
		case 929: return ini_close;
		case 930: return ini_read_string;
		case 931: return ini_read_real;
		case 932: return ini_write_string;
		case 933: return ini_write_real;
		case 934: return ini_key_exists;
		case 935: return ini_section_exists;
		case 936: return ini_key_delete;
		case 937: return ini_section_delete;
		case 938: return ds_set_precision;
		case 939: return ds_exists;
		case 940: return ds_stack_create;
		case 941: return ds_stack_destroy;
		case 942: return ds_stack_clear;
		case 943: return ds_stack_copy;
		case 944: return ds_stack_size;
		case 945: return ds_stack_empty;
		case 946: return ds_stack_push;
		case 947: return ds_stack_pop;
		case 948: return ds_stack_top;
		case 949: return ds_stack_write;
		case 950: return ds_stack_read;
		case 951: return ds_queue_create;
		case 952: return ds_queue_destroy;
		case 953: return ds_queue_clear;
		case 954: return ds_queue_copy;
		case 955: return ds_queue_size;
		case 956: return ds_queue_empty;
		case 957: return ds_queue_enqueue;
		case 958: return ds_queue_dequeue;
		case 959: return ds_queue_head;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_960(l_ind) {
	switch (l_ind) {
		case 960: return ds_queue_tail;
		case 961: return ds_queue_write;
		case 962: return ds_queue_read;
		case 963: return ds_list_create;
		case 964: return ds_list_destroy;
		case 965: return ds_list_clear;
		case 966: return ds_list_copy;
		case 967: return ds_list_size;
		case 968: return ds_list_empty;
		case 969: return ds_list_add;
		case 970: return ds_list_insert;
		case 971: return ds_list_replace;
		case 972: return ds_list_delete;
		case 973: return ds_list_find_index;
		case 974: return ds_list_find_value;
		case 975: return ds_list_is_map;
		case 976: return ds_list_is_list;
		case 977: return ds_list_mark_as_list;
		case 978: return ds_list_mark_as_map;
		case 979: return ds_list_sort;
		case 980: return ds_list_shuffle;
		case 981: return ds_list_write;
		case 982: return ds_list_read;
		case 983: return ds_list_set;
		case 984: return ds_map_create;
		case 985: return ds_map_destroy;
		case 986: return ds_map_clear;
		case 987: return ds_map_copy;
		case 988: return ds_map_size;
		case 989: return ds_map_empty;
		case 990: return ds_map_add;
		case 991: return ds_map_add_list;
		case 992: return ds_map_add_map;
		case 993: return ds_map_replace;
		case 994: return ds_map_replace_map;
		case 995: return ds_map_replace_list;
		case 996: return ds_map_delete;
		case 997: return ds_map_exists;
		case 998: return ds_map_values_to_array;
		case 999: return ds_map_keys_to_array;
		case 1000: return ds_map_find_value;
		case 1001: return ds_map_is_map;
		case 1002: return ds_map_is_list;
		case 1003: return ds_map_find_previous;
		case 1004: return ds_map_find_next;
		case 1005: return ds_map_find_first;
		case 1006: return ds_map_find_last;
		case 1007: return ds_map_write;
		case 1008: return ds_map_read;
		case 1009: return ds_map_secure_save;
		case 1010: return ds_map_secure_load;
		case 1011: return ds_map_secure_load_buffer;
		case 1012: return ds_map_secure_save_buffer;
		case 1013: return ds_map_set;
		case 1014: return ds_priority_create;
		case 1015: return ds_priority_destroy;
		case 1016: return ds_priority_clear;
		case 1017: return ds_priority_copy;
		case 1018: return ds_priority_size;
		case 1019: return ds_priority_empty;
		case 1020: return ds_priority_add;
		case 1021: return ds_priority_change_priority;
		case 1022: return ds_priority_find_priority;
		case 1023: return ds_priority_delete_value;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_1024(l_ind) {
	switch (l_ind) {
		case 1024: return ds_priority_delete_min;
		case 1025: return ds_priority_find_min;
		case 1026: return ds_priority_delete_max;
		case 1027: return ds_priority_find_max;
		case 1028: return ds_priority_write;
		case 1029: return ds_priority_read;
		case 1030: return ds_grid_create;
		case 1031: return ds_grid_destroy;
		case 1032: return ds_grid_copy;
		case 1033: return ds_grid_resize;
		case 1034: return ds_grid_width;
		case 1035: return ds_grid_height;
		case 1036: return ds_grid_clear;
		case 1037: return ds_grid_add;
		case 1038: return ds_grid_multiply;
		case 1039: return ds_grid_set_region;
		case 1040: return ds_grid_add_region;
		case 1041: return ds_grid_multiply_region;
		case 1042: return ds_grid_set_disk;
		case 1043: return ds_grid_add_disk;
		case 1044: return ds_grid_multiply_disk;
		case 1045: return ds_grid_set_grid_region;
		case 1046: return ds_grid_add_grid_region;
		case 1047: return ds_grid_multiply_grid_region;
		case 1048: return ds_grid_get_sum;
		case 1049: return ds_grid_get_max;
		case 1050: return ds_grid_get_min;
		case 1051: return ds_grid_get_mean;
		case 1052: return ds_grid_get_disk_sum;
		case 1053: return ds_grid_get_disk_min;
		case 1054: return ds_grid_get_disk_max;
		case 1055: return ds_grid_get_disk_mean;
		case 1056: return ds_grid_value_exists;
		case 1057: return ds_grid_value_x;
		case 1058: return ds_grid_value_y;
		case 1059: return ds_grid_value_disk_exists;
		case 1060: return ds_grid_value_disk_x;
		case 1061: return ds_grid_value_disk_y;
		case 1062: return ds_grid_shuffle;
		case 1063: return ds_grid_write;
		case 1064: return ds_grid_read;
		case 1065: return ds_grid_sort;
		case 1066: return ds_grid_set;
		case 1067: return ds_grid_get;
		case 1068: return ds_grid_to_mp_grid;
		case 1069: return effect_create_below;
		case 1070: return effect_create_above;
		case 1071: return effect_create_layer;
		case 1072: return effect_create_depth;
		case 1073: return effect_clear;
		case 1074: return part_type_create;
		case 1075: return part_type_destroy;
		case 1076: return part_type_exists;
		case 1077: return part_type_clear;
		case 1078: return part_type_shape;
		case 1079: return part_type_sprite;
		case 1080: return part_type_subimage;
		case 1081: return part_type_size;
		case 1082: return part_type_size_x;
		case 1083: return part_type_size_y;
		case 1084: return part_type_scale;
		case 1085: return part_type_orientation;
		case 1086: return part_type_life;
		case 1087: return part_type_step;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_1088(l_ind) {
	switch (l_ind) {
		case 1088: return part_type_death;
		case 1089: return part_type_speed;
		case 1090: return part_type_direction;
		case 1091: return part_type_gravity;
		case 1092: return part_type_colour1;
		case 1093: return part_type_colour2;
		case 1094: return part_type_colour3;
		case 1095: return part_type_colour_mix;
		case 1096: return part_type_colour_rgb;
		case 1097: return part_type_colour_hsv;
		case 1098: return part_type_color1;
		case 1099: return part_type_color2;
		case 1100: return part_type_color3;
		case 1101: return part_type_color_mix;
		case 1102: return part_type_color_rgb;
		case 1103: return part_type_color_hsv;
		case 1104: return part_type_alpha1;
		case 1105: return part_type_alpha2;
		case 1106: return part_type_alpha3;
		case 1107: return part_type_blend;
		case 1108: return particle_get_info;
		case 1109: return particle_exists;
		case 1110: return part_system_create;
		case 1111: return part_system_create_layer;
		case 1112: return part_system_destroy;
		case 1113: return part_system_exists;
		case 1114: return part_system_clear;
		case 1115: return part_system_draw_order;
		case 1116: return part_system_depth;
		case 1117: return part_system_color;
		case 1118: return part_system_colour;
		case 1119: return part_system_position;
		case 1120: return part_system_angle;
		case 1121: return part_system_automatic_update;
		case 1122: return part_system_automatic_draw;
		case 1123: return part_system_update;
		case 1124: return part_system_drawit;
		case 1125: return part_system_get_layer;
		case 1126: return part_system_layer;
		case 1127: return part_system_global_space;
		case 1128: return part_system_get_info;
		case 1129: return part_particles_create;
		case 1130: return part_particles_create_colour;
		case 1131: return part_particles_create_color;
		case 1132: return part_particles_burst;
		case 1133: return part_particles_clear;
		case 1134: return part_particles_count;
		case 1135: return part_emitter_create;
		case 1136: return part_emitter_destroy;
		case 1137: return part_emitter_destroy_all;
		case 1138: return part_emitter_enable;
		case 1139: return part_emitter_exists;
		case 1140: return part_emitter_clear;
		case 1141: return part_emitter_region;
		case 1142: return part_emitter_burst;
		case 1143: return part_emitter_stream;
		case 1144: return part_emitter_delay;
		case 1145: return part_emitter_interval;
		case 1146: return part_emitter_relative;
		case 1147: return window_handle;
		case 1148: return window_device;
		case 1149: return matrix_get;
		case 1150: return matrix_set;
		case 1151: return matrix_build_identity;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_1152(l_ind) {
	switch (l_ind) {
		case 1152: return matrix_build;
		case 1153: return matrix_build_lookat;
		case 1154: return matrix_build_projection_ortho;
		case 1155: return matrix_build_projection_perspective;
		case 1156: return matrix_build_projection_perspective_fov;
		case 1157: return matrix_multiply;
		case 1158: return matrix_transform_vertex;
		case 1159: return matrix_stack_push;
		case 1160: return matrix_stack_pop;
		case 1161: return matrix_stack_set;
		case 1162: return matrix_stack_clear;
		case 1163: return matrix_stack_top;
		case 1164: return matrix_stack_is_empty;
		case 1165: return browser_input_capture;
		case 1166: return os_get_config;
		case 1167: return os_get_info;
		case 1168: return os_get_language;
		case 1169: return os_get_region;
		case 1170: return os_check_permission;
		case 1171: return os_request_permission;
		case 1172: return os_lock_orientation;
		case 1173: return os_set_orientation_lock;
		case 1174: return display_get_dpi_x;
		case 1175: return display_get_dpi_y;
		case 1176: return display_set_gui_size;
		case 1177: return display_set_gui_maximise;
		case 1178: return display_set_gui_maximize;
		case 1179: return device_mouse_dbclick_enable;
		case 1180: return display_set_timing_method;
		case 1181: return display_get_timing_method;
		case 1182: return display_set_sleep_margin;
		case 1183: return display_get_sleep_margin;
		case 1184: return virtual_key_add;
		case 1185: return virtual_key_hide;
		case 1186: return virtual_key_delete;
		case 1187: return virtual_key_show;
		case 1188: return draw_enable_drawevent;
		case 1189: return draw_texture_flush;
		case 1190: return draw_flush;
		case 1191: return gpu_set_blendenable;
		case 1192: return gpu_set_ztestenable;
		case 1193: return gpu_set_zfunc;
		case 1194: return gpu_set_zwriteenable;
		case 1195: return gpu_set_depth;
		case 1196: return gpu_set_fog;
		case 1197: return gpu_set_cullmode;
		case 1198: return gpu_set_blendmode;
		case 1199: return gpu_set_blendmode_ext;
		case 1200: return gpu_set_blendmode_ext_sepalpha;
		case 1201: return gpu_set_colorwriteenable;
		case 1202: return gpu_set_colourwriteenable;
		case 1203: return gpu_set_alphatestenable;
		case 1204: return gpu_set_alphatestref;
		case 1205: return gpu_set_texfilter;
		case 1206: return gpu_set_texfilter_ext;
		case 1207: return gpu_set_texrepeat;
		case 1208: return gpu_set_texrepeat_ext;
		case 1209: return gpu_set_tex_filter;
		case 1210: return gpu_set_tex_filter_ext;
		case 1211: return gpu_set_tex_repeat;
		case 1212: return gpu_set_tex_repeat_ext;
		case 1213: return gpu_set_tex_mip_filter;
		case 1214: return gpu_set_tex_mip_filter_ext;
		case 1215: return gpu_set_tex_mip_bias;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_1216(l_ind) {
	switch (l_ind) {
		case 1216: return gpu_set_tex_mip_bias_ext;
		case 1217: return gpu_set_tex_min_mip;
		case 1218: return gpu_set_tex_min_mip_ext;
		case 1219: return gpu_set_tex_max_mip;
		case 1220: return gpu_set_tex_max_mip_ext;
		case 1221: return gpu_set_tex_max_aniso;
		case 1222: return gpu_set_tex_max_aniso_ext;
		case 1223: return gpu_set_tex_mip_enable;
		case 1224: return gpu_set_tex_mip_enable_ext;
		case 1225: return gpu_get_blendenable;
		case 1226: return gpu_get_ztestenable;
		case 1227: return gpu_get_zfunc;
		case 1228: return gpu_get_zwriteenable;
		case 1229: return gpu_get_depth;
		case 1230: return gpu_get_fog;
		case 1231: return gpu_get_cullmode;
		case 1232: return gpu_get_blendmode;
		case 1233: return gpu_get_blendmode_ext;
		case 1234: return gpu_get_blendmode_ext_sepalpha;
		case 1235: return gpu_get_blendmode_src;
		case 1236: return gpu_get_blendmode_dest;
		case 1237: return gpu_get_blendmode_srcalpha;
		case 1238: return gpu_get_blendmode_destalpha;
		case 1239: return gpu_get_colorwriteenable;
		case 1240: return gpu_get_colourwriteenable;
		case 1241: return gpu_get_alphatestenable;
		case 1242: return gpu_get_alphatestref;
		case 1243: return gpu_get_texfilter;
		case 1244: return gpu_get_texfilter_ext;
		case 1245: return gpu_get_texrepeat;
		case 1246: return gpu_get_texrepeat_ext;
		case 1247: return gpu_get_tex_filter;
		case 1248: return gpu_get_tex_filter_ext;
		case 1249: return gpu_get_tex_repeat;
		case 1250: return gpu_get_tex_repeat_ext;
		case 1251: return gpu_get_tex_mip_filter;
		case 1252: return gpu_get_tex_mip_filter_ext;
		case 1253: return gpu_get_tex_mip_bias;
		case 1254: return gpu_get_tex_mip_bias_ext;
		case 1255: return gpu_get_tex_min_mip;
		case 1256: return gpu_get_tex_min_mip_ext;
		case 1257: return gpu_get_tex_max_mip;
		case 1258: return gpu_get_tex_max_mip_ext;
		case 1259: return gpu_get_tex_max_aniso;
		case 1260: return gpu_get_tex_max_aniso_ext;
		case 1261: return gpu_get_tex_mip_enable;
		case 1262: return gpu_get_tex_mip_enable_ext;
		case 1263: return gpu_push_state;
		case 1264: return gpu_pop_state;
		case 1265: return gpu_get_state;
		case 1266: return gpu_set_state;
		case 1267: return draw_light_define_ambient;
		case 1268: return draw_light_define_direction;
		case 1269: return draw_light_define_point;
		case 1270: return draw_light_enable;
		case 1271: return draw_set_lighting;
		case 1272: return draw_light_get_ambient;
		case 1273: return draw_light_get;
		case 1274: return draw_get_lighting;
		case 1275: return shop_leave_rating;
		case 1276: return url_get_domain;
		case 1277: return url_open;
		case 1278: return url_open_ext;
		case 1279: return url_open_full;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_1280(l_ind) {
	switch (l_ind) {
		case 1280: return get_timer;
		case 1281: return device_get_tilt_x;
		case 1282: return device_get_tilt_y;
		case 1283: return device_get_tilt_z;
		case 1284: return device_is_keypad_open;
		case 1285: return device_mouse_check_button;
		case 1286: return device_mouse_check_button_pressed;
		case 1287: return device_mouse_check_button_released;
		case 1288: return device_mouse_x;
		case 1289: return device_mouse_y;
		case 1290: return device_mouse_raw_x;
		case 1291: return device_mouse_raw_y;
		case 1292: return device_mouse_x_to_gui;
		case 1293: return device_mouse_y_to_gui;
		case 1294: return gamepad_is_supported;
		case 1295: return gamepad_get_device_count;
		case 1296: return gamepad_is_connected;
		case 1297: return gamepad_get_description;
		case 1298: return gamepad_get_button_threshold;
		case 1299: return gamepad_set_button_threshold;
		case 1300: return gamepad_get_axis_deadzone;
		case 1301: return gamepad_set_axis_deadzone;
		case 1302: return gamepad_button_count;
		case 1303: return gamepad_button_check;
		case 1304: return gamepad_button_check_pressed;
		case 1305: return gamepad_button_check_released;
		case 1306: return gamepad_button_value;
		case 1307: return gamepad_axis_count;
		case 1308: return gamepad_axis_value;
		case 1309: return gamepad_set_vibration;
		case 1310: return gamepad_set_colour;
		case 1311: return gamepad_set_color;
		case 1312: return gamepad_hat_count;
		case 1313: return gamepad_hat_value;
		case 1314: return gamepad_remove_mapping;
		case 1315: return gamepad_test_mapping;
		case 1316: return gamepad_get_mapping;
		case 1317: return gamepad_get_guid;
		case 1318: return gamepad_set_option;
		case 1319: return gamepad_get_option;
		case 1320: return os_is_paused;
		case 1321: return window_has_focus;
		case 1322: return code_is_compiled;
		case 1323: return http_get;
		case 1324: return http_get_file;
		case 1325: return http_post_string;
		case 1326: return http_request;
		case 1327: return http_get_request_crossorigin;
		case 1328: return http_set_request_crossorigin;
		case 1329: return json_encode;
		case 1330: return json_decode;
		case 1331: return json_stringify;
		case 1332: return json_parse;
		case 1333: return zip_unzip;
		case 1334: return zip_unzip_async;
		case 1335: return zip_create;
		case 1336: return zip_add_file;
		case 1337: return zip_save;
		case 1338: return load_csv;
		case 1339: return base64_encode;
		case 1340: return base64_decode;
		case 1341: return md5_string_unicode;
		case 1342: return md5_string_utf8;
		case 1343: return md5_file;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_1344(l_ind) {
	switch (l_ind) {
		case 1344: return os_is_network_connected;
		case 1345: return sha1_string_unicode;
		case 1346: return sha1_string_utf8;
		case 1347: return sha1_file;
		case 1348: return os_powersave_enable;
		case 1349: return uwp_livetile_tile_clear;
		case 1350: return uwp_livetile_badge_notification;
		case 1351: return uwp_livetile_badge_clear;
		case 1352: return uwp_livetile_queue_enable;
		case 1353: return uwp_secondarytile_pin;
		case 1354: return uwp_secondarytile_badge_notification;
		case 1355: return uwp_secondarytile_delete;
		case 1356: return uwp_secondarytile_badge_clear;
		case 1357: return uwp_secondarytile_tile_clear;
		case 1358: return uwp_livetile_notification_begin;
		case 1359: return uwp_livetile_notification_secondary_begin;
		case 1360: return uwp_livetile_notification_expiry;
		case 1361: return uwp_livetile_notification_tag;
		case 1362: return uwp_livetile_notification_text_add;
		case 1363: return uwp_livetile_notification_image_add;
		case 1364: return uwp_livetile_notification_end;
		case 1365: return uwp_livetile_notification_template_add;
		case 1366: return uwp_device_touchscreen_available;
		case 1367: return physics_world_create;
		case 1368: return physics_world_gravity;
		case 1369: return physics_world_update_speed;
		case 1370: return physics_world_update_iterations;
		case 1371: return physics_world_draw_debug;
		case 1372: return physics_pause_enable;
		case 1373: return physics_fixture_create;
		case 1374: return physics_fixture_set_kinematic;
		case 1375: return physics_fixture_set_density;
		case 1376: return physics_fixture_set_awake;
		case 1377: return physics_fixture_set_restitution;
		case 1378: return physics_fixture_set_friction;
		case 1379: return physics_fixture_set_collision_group;
		case 1380: return physics_fixture_set_sensor;
		case 1381: return physics_fixture_set_linear_damping;
		case 1382: return physics_fixture_set_angular_damping;
		case 1383: return physics_fixture_set_circle_shape;
		case 1384: return physics_fixture_set_box_shape;
		case 1385: return physics_fixture_set_edge_shape;
		case 1386: return physics_fixture_set_polygon_shape;
		case 1387: return physics_fixture_set_chain_shape;
		case 1388: return physics_fixture_add_point;
		case 1389: return physics_fixture_bind;
		case 1390: return physics_fixture_bind_ext;
		case 1391: return physics_fixture_delete;
		case 1392: return physics_apply_force;
		case 1393: return physics_apply_impulse;
		case 1394: return physics_apply_angular_impulse;
		case 1395: return physics_apply_local_force;
		case 1396: return physics_apply_local_impulse;
		case 1397: return physics_apply_torque;
		case 1398: return physics_mass_properties;
		case 1399: return physics_draw_debug;
		case 1400: return physics_test_overlap;
		case 1401: return physics_remove_fixture;
		case 1402: return physics_set_friction;
		case 1403: return physics_set_density;
		case 1404: return physics_set_restitution;
		case 1405: return physics_get_friction;
		case 1406: return physics_get_density;
		case 1407: return physics_get_restitution;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_1408(l_ind) {
	switch (l_ind) {
		case 1408: return physics_joint_distance_create;
		case 1409: return physics_joint_rope_create;
		case 1410: return physics_joint_revolute_create;
		case 1411: return physics_joint_prismatic_create;
		case 1412: return physics_joint_pulley_create;
		case 1413: return physics_joint_wheel_create;
		case 1414: return physics_joint_weld_create;
		case 1415: return physics_joint_friction_create;
		case 1416: return physics_joint_gear_create;
		case 1417: return physics_joint_enable_motor;
		case 1418: return physics_joint_get_value;
		case 1419: return physics_joint_set_value;
		case 1420: return physics_joint_delete;
		case 1421: return physics_particle_create;
		case 1422: return physics_particle_delete;
		case 1423: return physics_particle_delete_region_circle;
		case 1424: return physics_particle_delete_region_box;
		case 1425: return physics_particle_delete_region_poly;
		case 1426: return physics_particle_set_flags;
		case 1427: return physics_particle_set_category_flags;
		case 1428: return physics_particle_draw;
		case 1429: return physics_particle_draw_ext;
		case 1430: return physics_particle_count;
		case 1431: return physics_particle_get_data;
		case 1432: return physics_particle_get_data_particle;
		case 1433: return physics_particle_group_begin;
		case 1434: return physics_particle_group_circle;
		case 1435: return physics_particle_group_box;
		case 1436: return physics_particle_group_polygon;
		case 1437: return physics_particle_group_add_point;
		case 1438: return physics_particle_group_end;
		case 1439: return physics_particle_group_join;
		case 1440: return physics_particle_group_delete;
		case 1441: return physics_particle_group_count;
		case 1442: return physics_particle_group_get_data;
		case 1443: return physics_particle_group_get_mass;
		case 1444: return physics_particle_group_get_inertia;
		case 1445: return physics_particle_group_get_centre_x;
		case 1446: return physics_particle_group_get_centre_y;
		case 1447: return physics_particle_group_get_vel_x;
		case 1448: return physics_particle_group_get_vel_y;
		case 1449: return physics_particle_group_get_ang_vel;
		case 1450: return physics_particle_group_get_x;
		case 1451: return physics_particle_group_get_y;
		case 1452: return physics_particle_group_get_angle;
		case 1453: return physics_particle_set_group_flags;
		case 1454: return physics_particle_get_group_flags;
		case 1455: return physics_particle_get_max_count;
		case 1456: return physics_particle_get_radius;
		case 1457: return physics_particle_get_density;
		case 1458: return physics_particle_get_damping;
		case 1459: return physics_particle_get_gravity_scale;
		case 1460: return physics_particle_set_max_count;
		case 1461: return physics_particle_set_radius;
		case 1462: return physics_particle_set_density;
		case 1463: return physics_particle_set_damping;
		case 1464: return physics_particle_set_gravity_scale;
		case 1465: return network_create_socket;
		case 1466: return network_create_socket_ext;
		case 1467: return network_create_server;
		case 1468: return network_create_server_raw;
		case 1469: return network_connect;
		case 1470: return network_connect_raw;
		case 1471: return network_connect_async;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_1472(l_ind) {
	switch (l_ind) {
		case 1472: return network_connect_raw_async;
		case 1473: return network_send_packet;
		case 1474: return network_send_raw;
		case 1475: return network_send_broadcast;
		case 1476: return network_send_udp;
		case 1477: return network_send_udp_raw;
		case 1478: return network_set_timeout;
		case 1479: return network_set_config;
		case 1480: return network_resolve;
		case 1481: return network_destroy;
		case 1482: return buffer_create;
		case 1483: return buffer_write;
		case 1484: return buffer_read;
		case 1485: return buffer_seek;
		case 1486: return buffer_get_surface;
		case 1487: return buffer_set_surface;
		case 1488: return buffer_set_used_size;
		case 1489: return buffer_delete;
		case 1490: return buffer_exists;
		case 1491: return buffer_get_type;
		case 1492: return buffer_get_alignment;
		case 1493: return buffer_poke;
		case 1494: return buffer_peek;
		case 1495: return buffer_save;
		case 1496: return buffer_save_ext;
		case 1497: return buffer_load;
		case 1498: return buffer_load_ext;
		case 1499: return buffer_load_partial;
		case 1500: return buffer_copy;
		case 1501: return buffer_copy_stride;
		case 1502: return buffer_fill;
		case 1503: return buffer_get_size;
		case 1504: return buffer_tell;
		case 1505: return buffer_resize;
		case 1506: return buffer_md5;
		case 1507: return buffer_sha1;
		case 1508: return buffer_crc32;
		case 1509: return buffer_base64_encode;
		case 1510: return buffer_base64_decode;
		case 1511: return buffer_base64_decode_ext;
		case 1512: return buffer_sizeof;
		case 1513: return buffer_get_address;
		case 1514: return buffer_create_from_vertex_buffer;
		case 1515: return buffer_create_from_vertex_buffer_ext;
		case 1516: return buffer_copy_from_vertex_buffer;
		case 1517: return buffer_async_group_begin;
		case 1518: return buffer_async_group_option;
		case 1519: return buffer_async_group_end;
		case 1520: return buffer_load_async;
		case 1521: return buffer_save_async;
		case 1522: return buffer_compress;
		case 1523: return buffer_decompress;
		case 1524: return gml_release_mode;
		case 1525: return shader_set;
		case 1526: return shader_get_name;
		case 1527: return shader_reset;
		case 1528: return shader_current;
		case 1529: return shader_is_compiled;
		case 1530: return shader_get_sampler_index;
		case 1531: return shader_get_uniform;
		case 1532: return shader_set_uniform_i;
		case 1533: return shader_set_uniform_i_array;
		case 1534: return shader_set_uniform_f;
		case 1535: return shader_set_uniform_f_array;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_1536(l_ind) {
	switch (l_ind) {
		case 1536: return shader_set_uniform_f_buffer;
		case 1537: return shader_set_uniform_matrix;
		case 1538: return shader_set_uniform_matrix_array;
		case 1539: return shader_enable_corner_id;
		case 1540: return texture_set_stage;
		case 1541: return texture_get_texel_width;
		case 1542: return texture_get_texel_height;
		case 1543: return shaders_are_supported;
		case 1544: return vertex_format_begin;
		case 1545: return vertex_format_end;
		case 1546: return vertex_format_delete;
		case 1547: return vertex_format_add_position;
		case 1548: return vertex_format_add_position_3d;
		case 1549: return vertex_format_add_colour;
		case 1550: return vertex_format_add_color;
		case 1551: return vertex_format_add_normal;
		case 1552: return vertex_format_add_texcoord;
		case 1553: return vertex_format_add_custom;
		case 1554: return vertex_format_get_info;
		case 1555: return vertex_create_buffer;
		case 1556: return vertex_create_buffer_ext;
		case 1557: return vertex_delete_buffer;
		case 1558: return vertex_begin;
		case 1559: return vertex_end;
		case 1560: return vertex_position;
		case 1561: return vertex_position_3d;
		case 1562: return vertex_colour;
		case 1563: return vertex_color;
		case 1564: return vertex_argb;
		case 1565: return vertex_texcoord;
		case 1566: return vertex_normal;
		case 1567: return vertex_float1;
		case 1568: return vertex_float2;
		case 1569: return vertex_float3;
		case 1570: return vertex_float4;
		case 1571: return vertex_ubyte4;
		case 1572: return vertex_submit;
		case 1573: return vertex_submit_ext;
		case 1574: return vertex_freeze;
		case 1575: return vertex_get_number;
		case 1576: return vertex_get_buffer_size;
		case 1577: return vertex_create_buffer_from_buffer;
		case 1578: return vertex_create_buffer_from_buffer_ext;
		case 1579: return vertex_update_buffer_from_buffer;
		case 1580: return vertex_update_buffer_from_vertex;
		case 1581: return skeleton_animation_set;
		case 1582: return skeleton_animation_get;
		case 1583: return skeleton_animation_mix;
		case 1584: return skeleton_animation_set_ext;
		case 1585: return skeleton_animation_get_ext;
		case 1586: return skeleton_animation_get_duration;
		case 1587: return skeleton_animation_get_frames;
		case 1588: return skeleton_animation_clear;
		case 1589: return skeleton_skin_set;
		case 1590: return skeleton_skin_get;
		case 1591: return skeleton_skin_create;
		case 1592: return skeleton_attachment_set;
		case 1593: return skeleton_attachment_get;
		case 1594: return skeleton_attachment_create;
		case 1595: return skeleton_attachment_create_colour;
		case 1596: return skeleton_attachment_create_color;
		case 1597: return skeleton_attachment_exists;
		case 1598: return skeleton_attachment_replace;
		case 1599: return skeleton_attachment_replace_colour;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_1600(l_ind) {
	switch (l_ind) {
		case 1600: return skeleton_attachment_replace_color;
		case 1601: return skeleton_attachment_destroy;
		case 1602: return skeleton_collision_draw_set;
		case 1603: return skeleton_bone_data_get;
		case 1604: return skeleton_bone_data_set;
		case 1605: return skeleton_bone_state_get;
		case 1606: return skeleton_bone_state_set;
		case 1607: return skeleton_slot_colour_set;
		case 1608: return skeleton_slot_color_set;
		case 1609: return skeleton_slot_colour_get;
		case 1610: return skeleton_slot_color_get;
		case 1611: return skeleton_slot_alpha_get;
		case 1612: return skeleton_find_slot;
		case 1613: return skeleton_get_minmax;
		case 1614: return skeleton_get_num_bounds;
		case 1615: return skeleton_get_bounds;
		case 1616: return skeleton_animation_get_frame;
		case 1617: return skeleton_animation_set_frame;
		case 1618: return skeleton_animation_get_position;
		case 1619: return skeleton_animation_set_position;
		case 1620: return skeleton_animation_get_event_frames;
		case 1621: return skeleton_animation_is_looping;
		case 1622: return skeleton_animation_is_finished;
		case 1623: return draw_skeleton;
		case 1624: return draw_skeleton_time;
		case 1625: return draw_skeleton_instance;
		case 1626: return draw_skeleton_collision;
		case 1627: return draw_enable_skeleton_blendmodes;
		case 1628: return draw_get_enable_skeleton_blendmodes;
		case 1629: return skeleton_animation_list;
		case 1630: return skeleton_skin_list;
		case 1631: return skeleton_bone_list;
		case 1632: return skeleton_slot_list;
		case 1633: return skeleton_slot_data;
		case 1634: return skeleton_slot_data_instance;
		case 1635: return layer_get_id;
		case 1636: return layer_get_id_at_depth;
		case 1637: return layer_get_depth;
		case 1638: return layer_create;
		case 1639: return layer_destroy;
		case 1640: return layer_destroy_instances;
		case 1641: return layer_add_instance;
		case 1642: return layer_has_instance;
		case 1643: return layer_set_visible;
		case 1644: return layer_get_visible;
		case 1645: return layer_exists;
		case 1646: return layer_x;
		case 1647: return layer_y;
		case 1648: return layer_get_x;
		case 1649: return layer_get_y;
		case 1650: return layer_hspeed;
		case 1651: return layer_vspeed;
		case 1652: return layer_get_hspeed;
		case 1653: return layer_get_vspeed;
		case 1654: return layer_script_begin;
		case 1655: return layer_script_end;
		case 1656: return layer_shader;
		case 1657: return layer_get_script_begin;
		case 1658: return layer_get_script_end;
		case 1659: return layer_get_shader;
		case 1660: return layer_set_target_room;
		case 1661: return layer_get_target_room;
		case 1662: return layer_reset_target_room;
		case 1663: return layer_get_all;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_1664(l_ind) {
	switch (l_ind) {
		case 1664: return layer_get_all_elements;
		case 1665: return layer_get_name;
		case 1666: return layer_depth;
		case 1667: return layer_get_element_layer;
		case 1668: return layer_get_element_type;
		case 1669: return layer_element_move;
		case 1670: return layer_force_draw_depth;
		case 1671: return layer_is_draw_depth_forced;
		case 1672: return layer_get_forced_depth;
		case 1673: return layer_background_get_id;
		case 1674: return layer_background_exists;
		case 1675: return layer_background_create;
		case 1676: return layer_background_destroy;
		case 1677: return layer_background_visible;
		case 1678: return layer_background_change;
		case 1679: return layer_background_sprite;
		case 1680: return layer_background_htiled;
		case 1681: return layer_background_vtiled;
		case 1682: return layer_background_stretch;
		case 1683: return layer_background_yscale;
		case 1684: return layer_background_xscale;
		case 1685: return layer_background_blend;
		case 1686: return layer_background_alpha;
		case 1687: return layer_background_index;
		case 1688: return layer_background_speed;
		case 1689: return layer_background_get_visible;
		case 1690: return layer_background_get_sprite;
		case 1691: return layer_background_get_htiled;
		case 1692: return layer_background_get_vtiled;
		case 1693: return layer_background_get_stretch;
		case 1694: return layer_background_get_yscale;
		case 1695: return layer_background_get_xscale;
		case 1696: return layer_background_get_blend;
		case 1697: return layer_background_get_alpha;
		case 1698: return layer_background_get_index;
		case 1699: return layer_background_get_speed;
		case 1700: return layer_sprite_get_id;
		case 1701: return layer_sprite_exists;
		case 1702: return layer_sprite_create;
		case 1703: return layer_sprite_destroy;
		case 1704: return layer_sprite_change;
		case 1705: return layer_sprite_index;
		case 1706: return layer_sprite_speed;
		case 1707: return layer_sprite_xscale;
		case 1708: return layer_sprite_yscale;
		case 1709: return layer_sprite_angle;
		case 1710: return layer_sprite_blend;
		case 1711: return layer_sprite_alpha;
		case 1712: return layer_sprite_x;
		case 1713: return layer_sprite_y;
		case 1714: return layer_sprite_get_sprite;
		case 1715: return layer_sprite_get_index;
		case 1716: return layer_sprite_get_speed;
		case 1717: return layer_sprite_get_xscale;
		case 1718: return layer_sprite_get_yscale;
		case 1719: return layer_sprite_get_angle;
		case 1720: return layer_sprite_get_blend;
		case 1721: return layer_sprite_get_alpha;
		case 1722: return layer_sprite_get_x;
		case 1723: return layer_sprite_get_y;
		case 1724: return layer_tilemap_get_id;
		case 1725: return layer_tilemap_exists;
		case 1726: return layer_tilemap_create;
		case 1727: return layer_tilemap_destroy;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_1728(l_ind) {
	switch (l_ind) {
		case 1728: return tilemap_tileset;
		case 1729: return tilemap_x;
		case 1730: return tilemap_y;
		case 1731: return tilemap_set;
		case 1732: return tilemap_set_at_pixel;
		case 1733: return tileset_get_texture;
		case 1734: return tileset_get_uvs;
		case 1735: return tileset_get_name;
		case 1736: return tileset_get_info;
		case 1737: return tilemap_get_tileset;
		case 1738: return tilemap_get_tile_width;
		case 1739: return tilemap_get_tile_height;
		case 1740: return tilemap_get_width;
		case 1741: return tilemap_get_height;
		case 1742: return tilemap_set_width;
		case 1743: return tilemap_set_height;
		case 1744: return tilemap_get_x;
		case 1745: return tilemap_get_y;
		case 1746: return tilemap_get;
		case 1747: return tilemap_get_at_pixel;
		case 1748: return tilemap_get_cell_x_at_pixel;
		case 1749: return tilemap_get_cell_y_at_pixel;
		case 1750: return tilemap_clear;
		case 1751: return draw_tilemap;
		case 1752: return draw_tile;
		case 1753: return tilemap_set_global_mask;
		case 1754: return tilemap_get_global_mask;
		case 1755: return tilemap_set_mask;
		case 1756: return tilemap_get_mask;
		case 1757: return tilemap_get_frame;
		case 1758: return tile_set_empty;
		case 1759: return tile_set_index;
		case 1760: return tile_set_flip;
		case 1761: return tile_set_mirror;
		case 1762: return tile_set_rotate;
		case 1763: return tile_get_empty;
		case 1764: return tile_get_index;
		case 1765: return tile_get_flip;
		case 1766: return tile_get_mirror;
		case 1767: return tile_get_rotate;
		case 1768: return layer_tile_exists;
		case 1769: return layer_tile_create;
		case 1770: return layer_tile_destroy;
		case 1771: return layer_tile_change;
		case 1772: return layer_tile_xscale;
		case 1773: return layer_tile_yscale;
		case 1774: return layer_tile_blend;
		case 1775: return layer_tile_alpha;
		case 1776: return layer_tile_x;
		case 1777: return layer_tile_y;
		case 1778: return layer_tile_region;
		case 1779: return layer_tile_visible;
		case 1780: return layer_tile_get_sprite;
		case 1781: return layer_tile_get_xscale;
		case 1782: return layer_tile_get_yscale;
		case 1783: return layer_tile_get_blend;
		case 1784: return layer_tile_get_alpha;
		case 1785: return layer_tile_get_x;
		case 1786: return layer_tile_get_y;
		case 1787: return layer_tile_get_region;
		case 1788: return layer_tile_get_visible;
		case 1789: return layer_instance_get_instance;
		case 1790: return instance_activate_layer;
		case 1791: return instance_deactivate_layer;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_1792(l_ind) {
	switch (l_ind) {
		case 1792: return camera_create;
		case 1793: return camera_create_view;
		case 1794: return camera_destroy;
		case 1795: return camera_apply;
		case 1796: return camera_copy_transforms;
		case 1797: return camera_get_active;
		case 1798: return camera_get_default;
		case 1799: return camera_set_default;
		case 1800: return camera_set_view_mat;
		case 1801: return camera_set_proj_mat;
		case 1802: return camera_set_update_script;
		case 1803: return camera_set_begin_script;
		case 1804: return camera_set_end_script;
		case 1805: return camera_set_view_pos;
		case 1806: return camera_set_view_size;
		case 1807: return camera_set_view_speed;
		case 1808: return camera_set_view_border;
		case 1809: return camera_set_view_angle;
		case 1810: return camera_set_view_target;
		case 1811: return camera_get_view_mat;
		case 1812: return camera_get_proj_mat;
		case 1813: return camera_get_update_script;
		case 1814: return camera_get_begin_script;
		case 1815: return camera_get_end_script;
		case 1816: return camera_get_view_x;
		case 1817: return camera_get_view_y;
		case 1818: return camera_get_view_width;
		case 1819: return camera_get_view_height;
		case 1820: return camera_get_view_speed_x;
		case 1821: return camera_get_view_speed_y;
		case 1822: return camera_get_view_border_x;
		case 1823: return camera_get_view_border_y;
		case 1824: return camera_get_view_angle;
		case 1825: return camera_get_view_target;
		case 1826: return view_get_camera;
		case 1827: return view_get_visible;
		case 1828: return view_get_xport;
		case 1829: return view_get_yport;
		case 1830: return view_get_wport;
		case 1831: return view_get_hport;
		case 1832: return view_get_surface_id;
		case 1833: return view_set_camera;
		case 1834: return view_set_visible;
		case 1835: return view_set_xport;
		case 1836: return view_set_yport;
		case 1837: return view_set_wport;
		case 1838: return view_set_hport;
		case 1839: return view_set_surface_id;
		case 1840: return gesture_drag_time;
		case 1841: return gesture_drag_distance;
		case 1842: return gesture_flick_speed;
		case 1843: return gesture_double_tap_time;
		case 1844: return gesture_double_tap_distance;
		case 1845: return gesture_pinch_distance;
		case 1846: return gesture_pinch_angle_towards;
		case 1847: return gesture_pinch_angle_away;
		case 1848: return gesture_rotate_time;
		case 1849: return gesture_rotate_angle;
		case 1850: return gesture_tap_count;
		case 1851: return gesture_get_drag_time;
		case 1852: return gesture_get_drag_distance;
		case 1853: return gesture_get_flick_speed;
		case 1854: return gesture_get_double_tap_time;
		case 1855: return gesture_get_double_tap_distance;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_1856(l_ind) {
	switch (l_ind) {
		case 1856: return gesture_get_pinch_distance;
		case 1857: return gesture_get_pinch_angle_towards;
		case 1858: return gesture_get_pinch_angle_away;
		case 1859: return gesture_get_rotate_time;
		case 1860: return gesture_get_rotate_angle;
		case 1861: return gesture_get_tap_count;
		case 1862: return keyboard_virtual_show;
		case 1863: return keyboard_virtual_hide;
		case 1864: return keyboard_virtual_status;
		case 1865: return keyboard_virtual_height;
		case 1866: return tag_get_asset_ids;
		case 1867: return tag_get_assets;
		case 1868: return asset_get_tags;
		case 1869: return asset_add_tags;
		case 1870: return asset_remove_tags;
		case 1871: return asset_has_tags;
		case 1872: return asset_has_any_tag;
		case 1873: return asset_clear_tags;
		case 1874: return extension_exists;
		case 1875: return extension_get_version;
		case 1876: return extension_get_option_count;
		case 1877: return extension_get_option_names;
		case 1878: return extension_get_option_value;
		case 1879: return extension_get_options;
		case 1880: return layer_sequence_get_instance;
		case 1881: return layer_sequence_create;
		case 1882: return layer_sequence_destroy;
		case 1883: return layer_sequence_exists;
		case 1884: return layer_sequence_x;
		case 1885: return layer_sequence_y;
		case 1886: return layer_sequence_angle;
		case 1887: return layer_sequence_xscale;
		case 1888: return layer_sequence_yscale;
		case 1889: return layer_sequence_headpos;
		case 1890: return layer_sequence_headdir;
		case 1891: return layer_sequence_pause;
		case 1892: return layer_sequence_play;
		case 1893: return layer_sequence_speedscale;
		case 1894: return layer_sequence_get_x;
		case 1895: return layer_sequence_get_y;
		case 1896: return layer_sequence_get_angle;
		case 1897: return layer_sequence_get_xscale;
		case 1898: return layer_sequence_get_yscale;
		case 1899: return layer_sequence_get_headpos;
		case 1900: return layer_sequence_get_headdir;
		case 1901: return layer_sequence_get_sequence;
		case 1902: return layer_sequence_is_paused;
		case 1903: return layer_sequence_is_finished;
		case 1904: return layer_sequence_get_speedscale;
		case 1905: return layer_sequence_get_length;
		case 1906: return animcurve_get;
		case 1907: return animcurve_get_channel;
		case 1908: return animcurve_get_channel_index;
		case 1909: return animcurve_channel_evaluate;
		case 1910: return sequence_create;
		case 1911: return sequence_destroy;
		case 1912: return sequence_exists;
		case 1913: return sequence_get;
		case 1914: return sequence_keyframe_new;
		case 1915: return sequence_keyframedata_new;
		case 1916: return sequence_track_new;
		case 1917: return sequence_get_objects;
		case 1918: return sequence_instance_override_object;
		case 1919: return animcurve_create;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_1920(l_ind) {
	switch (l_ind) {
		case 1920: return animcurve_destroy;
		case 1921: return animcurve_exists;
		case 1922: return animcurve_channel_new;
		case 1923: return animcurve_point_new;
		case 1924: return fx_create;
		case 1925: return fx_get_name;
		case 1926: return fx_get_parameter_names;
		case 1927: return fx_get_parameter;
		case 1928: return fx_get_parameters;
		case 1929: return fx_get_single_layer;
		case 1930: return fx_set_parameter;
		case 1931: return fx_set_parameters;
		case 1932: return fx_set_single_layer;
		case 1933: return layer_set_fx;
		case 1934: return layer_get_fx;
		case 1935: return layer_clear_fx;
		case 1936: return layer_enable_fx;
		case 1937: return layer_fx_is_enabled;
		case 1938: return gc_collect;
		case 1939: return gc_enable;
		case 1940: return gc_is_enabled;
		case 1941: return gc_get_stats;
		case 1942: return gc_target_frame_time;
		case 1943: return gc_get_target_frame_time;
		case 1944: return weak_ref_create;
		case 1945: return weak_ref_alive;
		case 1946: return weak_ref_any_alive;
		case 1947: return time_source_create;
		case 1948: return time_source_destroy;
		case 1949: return time_source_start;
		case 1950: return time_source_stop;
		case 1951: return time_source_pause;
		case 1952: return time_source_resume;
		case 1953: return time_source_reset;
		case 1954: return time_source_reconfigure;
		case 1955: return time_source_get_period;
		case 1956: return time_source_get_reps_completed;
		case 1957: return time_source_get_reps_remaining;
		case 1958: return time_source_get_units;
		case 1959: return time_source_get_time_remaining;
		case 1960: return time_source_get_state;
		case 1961: return time_source_get_parent;
		case 1962: return time_source_get_children;
		case 1963: return time_source_exists;
		case 1964: return time_seconds_to_bpm;
		case 1965: return time_bpm_to_seconds;
		case 1966: return call_later;
		case 1967: return call_cancel;
		case 1968: return rollback_use_manual_start;
		case 1969: return rollback_use_late_join;
		case 1970: return rollback_define_player;
		case 1971: return rollback_define_input;
		case 1972: return rollback_define_mock_input;
		case 1973: return rollback_define_input_frame_delay;
		case 1974: return rollback_define_extra_network_latency;
		case 1975: return rollback_create_game;
		case 1976: return rollback_join_game;
		case 1977: return rollback_start_game;
		case 1978: return rollback_leave_game;
		case 1979: return rollback_get_input;
		case 1980: return rollback_chat;
		case 1981: return rollback_use_player_prefs;
		case 1982: return rollback_set_player_prefs;
		case 1983: return rollback_get_player_prefs;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_1984(l_ind) {
	switch (l_ind) {
		case 1984: return rollback_get_info;
		case 1985: return rollback_use_random_input;
		case 1986: return rollback_display_events;
		case 1987: return rollback_sync_on_frame;
		case 1988: return wallpaper_set_config;
		case 1989: return wallpaper_set_subscriptions;
		case 1990: return audio_bus_create;
		case 1991: return audio_effect_create;
		case 1992: return audio_emitter_bus;
		case 1993: return audio_emitter_get_bus;
		case 1994: return audio_bus_get_emitters;
		case 1995: return audio_bus_clear_emitters;
		case 1996: return lin_to_db;
		case 1997: return db_to_lin;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func(l_ind) {
	switch (l_ind & ~63) {
		case 0: return live_preinit_js_func_0(l_ind);
		case 64: return live_preinit_js_func_64(l_ind);
		case 128: return live_preinit_js_func_128(l_ind);
		case 192: return live_preinit_js_func_192(l_ind);
		case 256: return live_preinit_js_func_256(l_ind);
		case 320: return live_preinit_js_func_320(l_ind);
		case 384: return live_preinit_js_func_384(l_ind);
		case 448: return live_preinit_js_func_448(l_ind);
		case 512: return live_preinit_js_func_512(l_ind);
		case 576: return live_preinit_js_func_576(l_ind);
		case 640: return live_preinit_js_func_640(l_ind);
		case 704: return live_preinit_js_func_704(l_ind);
		case 768: return live_preinit_js_func_768(l_ind);
		case 832: return live_preinit_js_func_832(l_ind);
		case 896: return live_preinit_js_func_896(l_ind);
		case 960: return live_preinit_js_func_960(l_ind);
		case 1024: return live_preinit_js_func_1024(l_ind);
		case 1088: return live_preinit_js_func_1088(l_ind);
		case 1152: return live_preinit_js_func_1152(l_ind);
		case 1216: return live_preinit_js_func_1216(l_ind);
		case 1280: return live_preinit_js_func_1280(l_ind);
		case 1344: return live_preinit_js_func_1344(l_ind);
		case 1408: return live_preinit_js_func_1408(l_ind);
		case 1472: return live_preinit_js_func_1472(l_ind);
		case 1536: return live_preinit_js_func_1536(l_ind);
		case 1600: return live_preinit_js_func_1600(l_ind);
		case 1664: return live_preinit_js_func_1664(l_ind);
		case 1728: return live_preinit_js_func_1728(l_ind);
		case 1792: return live_preinit_js_func_1792(l_ind);
		case 1856: return live_preinit_js_func_1856(l_ind);
		case 1920: return live_preinit_js_func_1920(l_ind);
		case 1984: return live_preinit_js_func_1984(l_ind);
		default: return live_preinit_js_dummy;
	}
}
//*/
